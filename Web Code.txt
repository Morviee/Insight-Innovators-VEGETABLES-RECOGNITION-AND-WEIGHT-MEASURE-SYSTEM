import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, ClientSettings, WebRtcMode

# Tensorflow Model Prediction
def model_prediction(test_image):
    model = tf.keras.models.load_model("/content/drive/MyDrive/trained_model.h5")
    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(64, 64))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])  # convert single image to batch
    predictions = model.predict(input_arr)
    return np.argmax(predictions)  # return index of max element

# Weight Prediction
def weight_prediction(test_image):
    weight_model = tf.keras.models.load_model("/content/drive/MyDrive/trained_model_regression.h5")
    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(64, 64))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])  # Convert single image to batch
    weight_prediction = weight_model.predict(input_arr)
    return weight_prediction[0][0]  # Assuming the weight model outputs a single value for weight

# Video Processor for Streamlit WebRTC
class VideoProcessor(VideoProcessorBase):
    def _init_(self):
        self.is_capturing = False

    def recv(self, frame):
        if self.is_capturing:
            # Convert the frame to PIL Image
            pil_image = Image.fromarray(cv2.cvtColor(frame.to_ndarray(format="bgr24"), cv2.COLOR_BGR2RGB))

            # Save the image to a temporary file
            temp_image_path = "/tmp/temp_image.jpg"
            pil_image.save(temp_image_path)

            # Display the captured frame
            st.image(frame, channels="BGR", use_column_width=True)

        return frame

# Initialize shopping cart if not present
if "shopping_cart" not in st.session_state:
    st.session_state.shopping_cart = []

# Sidebar
st.sidebar.title("Dashboard")
app_mode = st.sidebar.selectbox("Select Page", ["Home", "About Project", "Prediction", "Shopping Cart"])

# Main Page
if app_mode == "Home":
    st.header("VEGETABLES RECOGNITION AND WEIGHT MEASURE SYSTEM")
    image_path = "/content/img4.jpg"
    st.image(image_path)

# About Project
elif app_mode == "About Project":
    st.header("About Project")
    st.subheader("About Dataset")
    st.text("This dataset contains images of the following food items:")
    st.code("Vegetables, Cucumber, Carrot, Capsicum, Potato, Tomato, Radish, Cabbage, Cauliflower , Beans, Bittergourd, Bottlegourd, Brinjal , Broccoli, Papaya.")
    st.subheader("Content")
    st.text("This dataset contains two folders:")
    st.text("1. train (1000 images)")
    st.text("2. test (200 images)")

# Prediction Page
elif app_mode == "Prediction":
    st.header("Model Prediction")
    option = st.radio("Choose Prediction Method:", ("Choose Image", "Capture Image"))

    if option == "Choose Image":
        test_image = st.file_uploader("Choose an Image:")
        if st.button("Show Image"):
            st.image(test_image, width=4, use_column_width=True)

        if st.button("Predict"):
            st.write("Our Prediction")
            class_result_index = model_prediction(test_image)
            weight_result = weight_prediction(test_image)

            # Reading Labels
            with open("/content/labels.txt") as f:
                content = f.readlines()
            label = [i[:-1] for i in content]

            st.success("Model predicts it's a {}".format(label[class_result_index]))
            st.success("Estimated Weight: {} g".format(round(weight_result * 100)))

            # Display Add to Cart button
            add_to_cart = st.button("Add to Cart")

            # Add item to shopping cart if Add to Cart button is clicked
            if add_to_cart:
                item = {
                    'name': label[class_result_index],
                    'weight': round(weight_result * 100),
                    'quantity': 1,  # Default quantity is 1
                    'price': round(weight_result * 2)  # Randomly generated price for demonstration
                }
                st.session_state.shopping_cart.append(item)

    elif option == "Capture Image":
        st.header("Capture Image for Prediction")
        webrtc_ctx = webrtc_streamer(
            key="example",
            video_processor_factory=VideoProcessor,
            client_settings=ClientSettings(
                rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]},
                media_stream_constraints={"video": True, "audio": False},
            ),
            mode=WebRtcMode.SENDRECV,
        )

        # Button to capture image
        capture_button = st.button("Capture Image")
        if capture_button and webrtc_ctx.video_processor:
            webrtc_ctx.video_processor.is_capturing = True

        if st.button("Predict"):
            if webrtc_ctx.video_processor.is_capturing:
                webrtc_ctx.video_processor.is_capturing = False  # Stop capturing
                class_result_index = model_prediction("/tmp/temp_image.jpg")
                weight_result = weight_prediction("/tmp/temp_image.jpg")

                # Reading Labels
                with open("/content/labels.txt") as f:
                    content = f.readlines()
                label = [i[:-1] for i in content]

                st.success("Model predicts it's a {}".format(label[class_result_index]))
                st.success("Estimated Weight: {} g".format(round(weight_result * 100)))

                # Display Add to Cart button
                add_to_cart = st.button("Add to Cart")

                # Add item to shopping cart if Add to Cart button is clicked
                if add_to_cart:
                    item = {
                        'name': label[class_result_index],
                        'weight': round(weight_result * 100),
                        'quantity': 1,  # Default quantity is 1
                        'price': round(weight_result * 2)  # Randomly generated price for demonstration
                    }
                    st.session_state.shopping_cart.append(item)
            else:
                st.warning("Please capture an image before predicting.")

# Shopping Cart Page
elif app_mode == "Shopping Cart":
    st.header("Shopping Cart")

    # Input area for user to enter a list of items
    user_item_list = st.text_area("Enter a list of items (comma-separated):", "")
    
    # Button to add items from the user's list to the shopping cart
    if st.button("Add Items from List"):
        items_from_user_list = [item.strip() for item in user_item_list.split(',')]
        for item_name in items_from_user_list:
            # Add a default item to the cart with randomly generated values for demonstration
            item = {
                'name': item_name,
                'weight': 100,
                'quantity': 1,
                'price': 5  # Randomly generated price for demonstration
            }
            st.session_state.shopping_cart.append(item)

    # Display shopping cart with delete buttons
    total_price = 0
    for i, item in enumerate(st.session_state.shopping_cart):
        st.write(f"{item['name']} - {item['quantity']} x {item['weight']}g - ${item['price']}")
        total_price += item['quantity'] * item['price']

        # Button to delete the item from the shopping cart
        delete_button = st.button(f"Delete {i + 1}")

        # Handle item deletion
        if delete_button:
            st.session_state.shopping_cart.pop(i)

    # Display total price
    st.write(f"Total: ${total_price}")

    # Display a message based on items in the shopping cart
    if len(st.session_state.shopping_cart) > 0:
        st.info("Review and complete your purchase!")
    else:
        st.info("Your shopping cart is empty.")